monitor MonitorSincronizador;
var
	waiting: array [4] of condition;
	printed, bufferAvailable: array [3] of boolean;
export
	empiezaImprimir, finImprimir, posicionLiberada,
	enviaNumero, numeroEnviado;

procedure empiezaImprimir (threadNum: integer);
	while(not printed[threadNum-1])
		delay(waiting[threadNum]);

procedure finImprimir (threadNum: integer);
	printed[threadNum] := true;
	resume(waiting[threadNum+1]);

procedure posicionLiberada (threadNum: integer);
	bufferAvailable[threadNum] := true;
	resume(waiting[threadNum]);
	while (bufferAvailable[threadNum])
		delay(waiting[3]);

procedure enviaNumero (threadNum: integer);
	while(not bufferAvailable[threadNum])
		delay(waiting[threadNum]);

procedure numeroEnviado (threadNum: integer);
	bufferAvailable[threadNum] := false;
	resume(waiting[3]);

process HiloRecolectorBasura
begin
	for i:=1 to 10000 do
		for j:=1 to 3 do
			wait(seen[j]);
		wait(mutex);
		sharedBuffer[i%10] = -1;
		signal(available);
		signal(mutex);
end;


process HiloGeneradorNum
begin
	for i:=1 to 10000 do
		wait(available);
		wait(mutex);
	sharedBuffer[i%10] = i+1;
	signal(mutex);
	for j:=1 to 3 do
		signal(ready[j]);
end;


process HiloMezclador

function minimoMixed(a,b,c: integer): integer
var
	monitor: MonitorSincronizador;
	posicion: integer;
begin
	if (a==99999) and (b==99999) and (c==99999)
		return -1;
	else
		if (a<=b and a<=c)
                return 0;
            else if (b<=a and b<=c)
                return 1;
            else
                return 2; 
end;
begin
	monitor.empiezaImprimir(3);
	imprimir("Secuencia final: ");
	posicion = minimoMixed(Main.mixedBuffer[0], Main.mixedBuffer[1], Main.mixedBuffer[2]);
	while (posicion<>-1)
		imprimir(mixedBuffer[posicion] + " ");
		monitor.posicionLiberada(posicion);
		posicion = minimoMixed(Main.mixedBuffer[0], Main.mixedBuffer[1], Main.mixedBuffer[2]);
end;




process HiloMultiplosDos
var
	monitor: MonitorSincronizador;
	inBuffer: array [10000/2] of integer
	cont: integer;
begin
	cont := 0;
	for i:= 1 to 10000 do
		wait(ready[0]);
		wait(mutex);
		if (sharedBuffer[i%10]%2 == 0)
			inBuffer[cont] = sharedBuffer[i%10];
			cont++;
		signal(mutex);
		signal(seen[0]);

	imprimir("Multiplos de 2: ")
	for j:= 1 to inBuffer.length-1 do
		imprimir(inBuffer[j] + " ");
	imprimir(inBuffer[inBuffer.lenght-1]);
	mixedBuffer[0] = inBuffer[0];
	monitor.finImprimir(0);

	for k:=1 to cont do
		monitor.enviaNumero(0);
		mixedBuffer[0] = inBuffer[k];
		monitor.numeroEnviado(0);

	monitor.enviaNumero(0);
	mixedBuffer[0] = 99999;
	monitor.numeroEnviado(0);	
end;



process HiloMultiplosTres
var
	monitor: MonitorSincronizador;
	inBuffer: array [10000/3] of integer
	cont: integer;
begin
	cont := 0;
	for i:= 1 to 10000 do
		wait(ready[1]);
		wait(mutex);
		if (sharedBuffer[i%10]%3 == 0)
			inBuffer[cont] = sharedBuffer[i%10];
			cont++;
		signal(mutex);
		signal(seen[1]);

	monitor.empiezaImprimir(1);
	imprimir("Multiplos de 3: ")
	for j:= 1 to inBuffer.length-1 do
		imprimir(inBuffer[j] + " ");
	imprimir(inBuffer[inBuffer.lenght-1]);
	mixedBuffer[1] = inBuffer[0];
	monitor.finImprimir(1);

	for k:=1 to cont do
		monitor.enviaNumero(1);
		mixedBuffer[1] = inBuffer[k];
		monitor.numeroEnviado(1);

	monitor.enviaNumero(1);
	mixedBuffer[1] = 99999;
	monitor.numeroEnviado(1);	
end;



process HiloMultiplosCinco
var
	monitor: MonitorSincronizador;
	inBuffer: array [10000/5] of integer
	cont: integer;
begin
	cont := 0;
	for i:= 1 to 10000 do
		wait(ready[2]);
		wait(mutex);
		if (sharedBuffer[i%10]%5 == 0)
			inBuffer[cont] = sharedBuffer[i%10];
			cont++;
		signal(mutex);
		signal(seen[2]);

	monitor.empiezaImprimir(2);
	imprimir("Multiplos de 5: ")
	for j:= 1 to inBuffer.length-1 do
		imprimir(inBuffer[j] + " ");
	imprimir(inBuffer[inBuffer.lenght-1]);
	mixedBuffer[2] = inBuffer[0];
	monitor.finImprimir(2);

	for k:=1 to cont do
		monitor.enviaNumero(2);
		mixedBuffer[2] = inBuffer[k];
		monitor.numeroEnviado(2);

	monitor.enviaNumero(2);
	mixedBuffer[2] = 99999;
	monitor.numeroEnviado(2);	
end;



main
var
	mixer: HiloMezclador;
	recolector: HiloRecolectorBasura;
	generator: HiloGenerador;
	mult2: HiloMultiplosDos;
	mult3: HiloMultiplosTres;
	mult5: HiloMultiplosCinco;
	monitor: MonitorSincronizador;

	ready, seen: array [3] of semaphore;
	mutex, available: semaphore;

	sharedBuffer: array [10] of integer;
	mixedBuffer: array [3] of integer;

begin
	initial(ready, 0);
	initial(seen, 0);
	initial(mutex, 1);
	initial(available, 10);

	cobegin
		generator;
		mult2;
		mult3;
		mult5;
		recolector;
		mixer;
	coend
end;